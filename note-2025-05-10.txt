aiopcwaにarch linuxをインストールします。

OSの運用が開始するまでの流れを共有します。概要欄に説明、実施状況の開始時刻を記載しています。

1. ハードウェア、ファーム(UEFI)の仕様
2. OSのファイルシステム
3. Linuxのインストールからネットワークの接続設定(wifi)

選定については、個人的な好みで選んでいる部分もありますことをご了承ください。

以下の内容について、説明と実施状況を動画共有します。

- ハードウェア、ファーム(UEFI)の仕様理解とOSのインストーラソフト(Arch linux)のハードウェアを認識。
- ストレージデバイス(ssd)のパーティション設定。
- ストレージデバイスのファイルフォーマットの選定。
- インストーラソフトによるストレージデバイスへのLinuxカーネルと必要なソフトウェアのインストール。
- ネットワーク接続設定のためのソフトウェアの選定、インストール。

# ハードウェア、ファーム(UEFI)

今回インストール対象のハードウェアは以下の仕様になっています。

| cpu | AMD Ryzen7 8845HS |
| memory |  64 GB  |
| ssd | 2 TB |
| グラフィック| Radeon 780M|

ポート
|USB 3.2| 2 | |
|USB 2.0| 2 | |
|HDMI| 2 | |
|DP 2.1| 2 | |
|シリアルポート| 1 | RS232、RS485 |

ネットワーク接続
|イーサネット| 2 |
|Wi-Fi| 1 |


ハードウェアには、こだわりがないです。
OSなしのPCで、ソフトウェア開発ができるものであれば、よいというくらいです。


# ファーム(UEFI)
マザーボードに組み込まれているチップのファームはUEFIの仕様に従ったものです。

ファームについて簡単な説明をしておきます。

ファームとはマザーボードのチップに書き込まれたソフトウェアです。このソフトウェアは、CPUやマザーボードに接続された機器との通信を行います。このソフトウェアは、基本的な機能だけを提供しています。このソフトウェアの機能を組み合わせて利用すると複雑な処理を行うことができます。ハードウェアがそれぞれ、異なる形式で機能を提供すると、利用する側もハードウェアの種類だけ必要になってしまいます。統一した形式で、機能を提供することで、複雑な処理を行う側が、1種類で済むようになります。この統一した仕様としてUEFIがあります。

ファームのUEFIのバージョンは2.8でした。

# OSの選定

ソフトウェア開発の使用が第一目的です。仕事でもLinux運用のシステムで開発をおこなうこと多いです。仕事では、問題解決(動作してお客様の要件を満たす)が最優先になることが多くて、詳しい理由まで調査ができないこともあります。Arch Linuxのインストールから設定まで、ドキュメントを確認しながら行うことが多いと思っています。確認しながら行うことで、詳しい内容を理解することができると感じていることが、選定の理由です。

# Arch Linuxのインストーラ選定

Arch LinuxのインストールはNetbootでインストールしていきます。Netbootは、ダウンロードサイトから、必要なインストーラをダウンロードして、ソフトウェアをインストールします。
UEFIには、BootManagerが含まれます。ハードウェア電源投入の時にBootManagerは、UEFI application(UEFI OS bootloader)を探します。
UEFI applicationが見つかったら、それを起動します。UEFI applicationがUEFI OS bootloaderである場合、OS boot loaderが、OSをハードウェアのメモリにロード、制御をOSに制御を渡します。今回のハードウェアでのUFEI applicaitonを探す箇所一覧は以下のようになります。

- 接続されたssd(nvme)
- イーサネット
- USBに接続されたリムーバブルメディア


UEFIのリムーバブルメディアでUFI applicationを見つけるための仕様

リムーバブルメディアは、FATファイルフォーマットである必要があります。FATファイルフォーマットはFAT8、FAT16、FAT32のいずれでも良いです。
ファイルパスは以下のパスになります。
\EFI\BOOT\BOOTx64.EFI


Linuxをインストールしたいのは、接続されたssdです。インストーラは、イーサネットまたは、USB接続のリムーバルメディアで検索される必要があります。
Netbootで最新のArch Linuxをインストールしたいので、USB接続のリムーバブルメディアのUEFI applicationをファーム(UEFI)が見つけられるように設定します。
なお、インストールした後は、ssdにあるUEFI applicationが見つけられるようにssdを設定します。


Netbootなので、イーサネットでは？という方もおられると思います。イーサネットによる起動は次のとおりで、採用していません。

イーサネットからのインストールは、PXEbootという方式(PXEbootはUEFIとは別の仕様)になります。PXE bootは、ip層で通信を行い、OS bootloaderを起動します。使用する場合は、イーサネットにip層のネットワークアドレスを割り当てる必要があります。今回の環境はネットワークアドレスがdhcpによって割り当てられています。PXEbootoの場合は、ファームウェアが、dhcpの割り当てをdhcpサーバに要求する時に、UEFI applicationを探している事を追加の情報として付加します。dhcpサーバが、UEFI applicationの情報を識別して、追加の情報を応答する必要があります。今回の環境では、追加情報を応答することができません。
こうした状況は、あり得るので、もう少し柔軟に対応できるような仕様になっています。
Proxy Dhcpサーバ(ipアドレスは割り当てず、追加情報のみを応答する)を立てて対応することができます。ネットワークにWindows OSのみがある環境でProxy Dhcpサーバを立てることも試してみましたが、上手くいかなかったです。詳細は割愛します。

NetbootとPXEbootの違い
PXEbootは、ファーム側でdhcpサーバにipアドレスを問い合わせます。bootloaderのダウンロード、起動までをファームが行います。

Netbootは、bootloader側でdhcpサーバにipアドレスを問い合わせます。ファームはストレージからbootloaderの起動を行います。


Netbootについて
ipxe-arch.efiファイルが、UEFI applicationです。このファイルをUSB リムーバブルメディアに\EFI\BOOT\BOOTx64.EFIとして保存します。


Arch Linuxインストール用のソフト起動

UEFIが、ipxe-arch.efi(BOOTx64.EFI)を起動し、ipxe-arch.efiで選定した、サイトからインストール用のソフトウェア(Arch Linux)を起動できました。

インストール用のソフトは、ssdに書き込まれているわけではなく、メモリにロードされている状態です。lsコマンドなどでファイルシステムがありますが、このファイルシステムもssd上のものではなく、メモリのみに存在しています。(scuashfsで実現している)
インストール用のソフトウェアは、UEFIからハードウェア情報を引き継いでいるので、動作しているハードウェアは認識できています。ls /devでリストされるファイルは、インストール用ソフトが制御しているハードウェアのデバイスを含んでいます。

インストーラソフトで、ssdにソフトをインストールしていきます。インストールする前にssdにファイルシステムを作成します。このことをフォーマットと呼びます。

ssdのフォーマット

ssdのフォーマットは以下の要件を満たすようにします。

- UEFIがssdに書き込まれたUEFI application(OS loader)を見つけられるようにする。
- UEFI applicationが起動したOS(Arch Linux)が、ssdに書き込まれたファイルシステムを認識できるようにする。

UEFIのBootManagerがUEFI applicationを見つけられるためのssdの仕様

以下をみたしている必要があります。

- UEFI systemパーティションがあり、そのファイルシステムがFATである
- \EFI\BOOT\BOOTx64.efiファイルがUEFI appplicationである


Arch Linuxが認識するファイルシステム

Linuxが認識するファイルシステムはいくつもあります。ファイルシステムの選定については、明確な基準を持ち合わせていません。今回はext4(これまで使用してきて問題を感じたことがない)としました。UEFI systemパーティションは、FAT形式のファイルフォーマットです。ext4をLinuxのファイルシステムとして使用したいので、このファイルシステム用にext4用のパーティションを追加設定します。


ssdのパーティション設定

Arch Linuxのインストールガイドでは、UEFI systemパーティションに1GiBを割りあてることを推奨しています。
推奨に従い、UEFI systemパーティションは1GiBとします。
残りは全て、ext4に割り当てます。

lvm2の導入
今後、Arch linux用のファイルシステムの容量を変更することも考えて、lvmを導入しておきます。


lvm2について
lvmとは、仮想のストレージデバイスのように振る舞い、物理的に2個のデバイスも連続した1つのストレージデバイスのように扱う事ができるソフトウェアです。physicalvolumeという単位をストレージに作り、physicalvolumeを複数つなげて、logicalvolumeを作成します。logicalvolumを複数つなげて、volume groupを作ります。このvolume groupが、1つのストレージになります。

ext4ファイルシステム作成
volume groupに対してext4ファイルシステムを作成します。


fdiskによるパーティション作成
インストールソフトに含まるfdiskによって、ssdにパーティションを作成します。パーティションを作成すると/devで別のファイルとして表示されます。

対象のデバイスをfdiskでロードします。
今回は、/dev/nvme0n1が対象のデバイスです。

nvme0n1について
ssdがNVM Express経由で接続されている場合、/devディレクトリにはnvmeの接頭辞の名前でリストされます。購入したハードウェアスペックからはNVMe SSDスロットで確認できます。



Arch linuxのインストール

/dev/vol-1/root-volを/mntにマウントします。マウントすると、Linux上で、ファイルシステムとして扱われます(cd、lsなどのコマンドが利用できる)。
UEFI systemパーティションがあるデバイスは/dev/nvme0n1p1になるのでこれもマウントします。

/mnt配下は、ssdで起動したArch linuxのファイルシステムになりますので以下のようにマウントします。

# mount /dev/vol-1/root-vol /mnt
# mount --makedir /dev/nvme0n1p1 /mnt/boot

ssdで起動後のファイルシステム

/
 + home/
 + root/
 + usr/
 + ...
 - boot/
   - EFI/
     - BOOT/
         BOOTx64.efi
       vmlinuxz
       ...

インストールソフトでのマウントは以下のようになっています
/
 - mnt/
   + home/
   + root/
   + usr/
   + ...
   - boot/
     - EFI/
       - BOOT/
         BOOTx64.efi
       vmlinuxz
       ...


/boot/EFI/BOOT/BOOTx64.efiについて

/EFI/BOOT/BOOTx64.efiでは？と思うかもしれないので追加の説明をします。

UEFIがArch Linuxを起動する流れを考えると/boot配下にあってよいことが理解できると思います。

- UEFIはUEFI applicationを検索するために、ssd内を検索します。まだ、Linuxのファイルシステムはロードされていない状態です。ssd内で検索される対象はUEFI systemパーティションです。UEFI systemパーティションでは、EFI\BOOT\BOOTx64.efiとしてUEFI applicationが存在しています。

- mountコマンドでは、UEFI systemパーティションのnvme0n1pを/mnt/bootにマウントしています。
- /boot/(/mnt/boot)はLinuxが起動した後のファイルシステムになっています。Linux上では、/boot配下にUEFI applicationにロードされるLinuxが格納されます。


起動した後のLinuxが、/boot配下の階層を利用することあるのか？

データ、プログラム作成などの通常の作業で/boot配下を使用することはないのではと思います。Linuxカーネルを更新したり、起動直後のアプリケーションをアップデートした場合は、/boot配下のファイルを更新します。アプリケーションを管理するパケージマネージャ(Archではpacman)が、更新のタイミングで/boot配下のファイルを自動で更新します。この用途のために、/boot階層があるのではと思います。
pacmanでLinuxカーネルが更新されたり、systemdが更新された場合は、/bootのファイルも更新されます。再起動すると、更新されたカーネルやsystemdが利用されます。
更新後に起動失敗する場合もあるため、前回の起動イメージファイルがfallbackとして残されます。


Linuxのインストール

/mnt配下にマウントしたファイルシステムに対して、Arch linuxをインストールしていきます。

$ pacstrap -K /mnt base linux linux-firmware

pacstrapはインストーラソフトにパケージをインストールするのではなく、/mnt配下のファイルシステムにソフトをインストールします。


初期インストールは以下のモジュールをインストールしています。
|base| bashなどの基本アプリケーション |
|linux| kernel module |
|linux-firmware| 周辺機器のファームウェアドライバ |


Linuxが起動した後のファイルシステムのマウント

起動時にファイルシステムがマウントされるようにftabファイルを作成します。
genfstab -U /mnt/ >> /mnt/etc/fstab




sddから起動した時のファイルシステムの状態で各種設定を行います。

以下のコマンドで、/mntが/(ルート)ディレクトリになります。
arch-chroot /mnt


ssdから起動した後のシステムの時間を設定しておきます。
タイムゾーンの設定

ln -sf /usr/shar/zoneinfo/Asia/Tokyo /etc/localtime

ハードウェアクロックの時間同期と調整値のファイル書き込み
hwclock --systohc
これから行う各種設定で、ファイルのタイムスタンプをできるだけ正確に記録しておくようにしておく意図があると思います。

ローカリゼーション

/etc/locale.genの編集

編集にあたってeditorが必要です。
sdd起動のファイルシステムで動作しているのでeditorがインストールされていません。
私はvimで作業をしていますので、vimをインストールします。

pacman -S vim

/etc/locale.genで使用することが予想されるロケールのコメントを外します。

今のところ、日本語くらいです。マニュアル等は、いろいろ言語がありますが、英語のものは必ず入っているので英語もコメントを外します。

# locale-gen

locale-genは追加の言語が必要になれば都度locale-genで追加できます。

デフォルトのロケールを設定します。今のところ日本語環境の設定をしていないので、英語に設定しておきます。

LANG=en_US.UTF-8

直接PCにつないでいるキーボードの設定を行います。
今回使用のキーボードは、日本語キーボードなので、jp106を設定します。

KEYMAP=jp106


Arch linuxの手順に従いhostnameも追加しておきます。いまのところ必要性を感じていません。

passwdの更新
rootのパスワードが設定していないとArch Linuxはログインできないようになっています。
rootのpasswdを設定します。


bootloaderの設定
UEFIが起動時に、ssdからUEFI applicationを見つけられるようにします。
EFI\BOOT\BOOOTx64.iefを設定します。前述したとおり、現在は、/boot配下がUEFIの検索対象ですので、 /boot/EFI/BOOT/BOOTx64.efiを設定します。
インストーラではipxe.efiをUSBに設定しました。今回は、ssdにあるLinuxをロードしたいので、別のファイルを使用します。
UEFIではUEFI applicationと呼ばれていますが、OSを起動するものはbootloaderと呼ばれます。LinuxではGrubがよく使用される印象です。Arch Linuxはinitにsystemdを採用しています。systemdパッケージには、systemd-bootというUEFI applicationかつOSローダーが付属しています。今回は、systemd-bootをbootloaderにします。

bootloaderが起動した時に表示するメニューの設定
少なくともデフォルトのメニューを用意する必要があります。このメニューで起動されるOSが今回インストールしたArch Linuxです。
メニューは/boot/loader/entries/配下に.conf拡張子で任意の名前をつけて作成します。
今回は、arch.confとしてメニューを作成します。
titleが起動時に表示される文字列です。
linuxはbootloaderがメモリにロードするLinuxです。UEFI systemパーティションのファイルシステムでの絶対パスで指定します。
initrdは、linuxがロードする最初のファイルシステムです。(後述)
optionはlinux起動時に与える起動オプションです。/(ルート)にマウントするパーティションを指定します。パーティションには、UUIDが設定されているので、そのUUIDを記載します。UUIDは長くて覚えていないとおもいます。ここでは、/etc/fstabからUUIDをコピーしています。

arch.confをdefaultのブートメニューとする
/boot/loader/loader.confを編集します。
defaultにarch.confを設定します。


UEFI application(bootloader)でメモリにロードされるinitramfsの更新

arch.confのinitrdで指定している/initramfsを更新します。
initramfsはArch Linuxが起動直後最初にロードする最初のファイルシステムです。このファイルシステムは、ssdに階層として確認できる形では作られていません。/boot階層にファイルの形式で格納されています。起動時には、リードオンリーのファイルシステムとして、メモリ上に存在します。このファイルシステムにあるプログラムを使用して、sddのファイルシステムをロードします。
デフォルトのinitramfsはlvmモジュールを含みません。lvmモジュールが、lvm形式のデバイスを認識するので、initramfsを変更する必要があります。

initramfsは/etc/mkcpio.confの設定によって生成されるので、mkcpio.confを編集します。

vim /etc/mkcpio.conf


ネットワーク関連の設定1
sddから起動したArch linuxはネットワークの設定をしていないので、イーサ―ネットとWiFiは、外部と通信できせん。
現在は、インストーラソフトが、イーサネットにipアドレスを割り当てているので外部通信ができます。
インターネット接続をパッケージをインストールしますので、イーサネットデバイスにipアドレスを割り当てるようにします。
接続していたら自動で、ipアドレスが割り当てられるようにしておきます。dhcpcd(dhcp client daemon)がこのような処理を行うアプリケーションになっているのでインストールします。
WiFiについては、iwdアプリケーションで設定ができます。
どちらも、ssdから起動した時のsystemdインスタンスから、起動したプロセスで設定を行います。インストールのみしておきます。

全ての設定が完了したので、ここまで設定でssdからLinuxが起動するか確認してみます。

起動できませんでした。

再度、ipxeからインストーラソフトを起動して、設定の誤りを修正していきます。
起動オプションが表示されていることから、loader.confまでは正常によみこまれていることがわかります。メニューを選択した後のvmlinuxのファイルシステムのロードで失敗していることがメッセージから判ります。
entries/arch.confの設定に誤りがありそうです。

initrdのファイルシステムのオプションを確認するとrootの後に=が抜けていました。
rootの後の=を追加して起動してみます。


ssdからLinuxが起動できたので、ssdから起動したsystemdに対してnetworkの設定をおこなっていきます。

networkの設定

dhcpの設定
systemdに対して、dhcpcdサービスを登録して、ネットワークインターフェースのLANが外部と通信できる状態になった場合に、ipアドレスを割り当てるように設定しておきます。

# systemctl enable dhcpcd
# systemctl start dhcpcd

startでdhcpdをサービス起動すると、起動の時点で、ipアドレスを割り当てしようとします。
ネットワークインターフェイスにipアドレスが割り当ているか確認します。


wifiの設定
systemdに対して、iwdサービスを登録して、Wi-fiの状態を監視するようにします。iwdの提供するアクセスポイントに対して、iwctlで、特定のアクセスポイントに接続します。iwctlは、接続したアクセスポイントをknown-networksに記録しています。



initとsystemdとArch Linuxの起動シーケンス

vmlinuxz(Linuxカーネル)がメモリにロードされinitramfsがメモリにロードされると、Linuxカーネルは/bin/initというプログラムを起動します。このプログラムは、PID(プロセスID)が1になります。全てのプログラムは、このプロセスIDが1のプログラムを先祖に持つプログラムになります。systemdは、コンパイルされたプログラムファイルです。systemdが登場する前は、initはシェルスクリプトでした。シェルスクリプトの場合は、処理が追えるので、良いとの意見もあるようです。私が知っている新しいLinux Distributionは、initはsystemdとなっているようです。


